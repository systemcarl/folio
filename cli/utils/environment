source "$(dirname "${BASH_SOURCE[0]}")/repo"

resolve_path() {
    local os="$(uname -s)"
    if [[ "$os" == "MINGW"* || "$os" == "MSYS"* || "$os" == "CYGWIN"* ]]; then
        cygpath -w "$1"
        return $?
    fi
    echo "$1"
    return 0
}

load_env() {
    if [[ "$ENV_LOADED" == "true" ]]; then return 0; fi

    while [[ "$*" != "" ]]; do
        case $1 in
            --environment ) ENVIRONMENT="$2"; shift;;
        esac
        shift
    done

    ENVIRONMENT="${ENVIRONMENT:-production}"

    ENV_FILE="$(realpath "$(dirname \
        "${BASH_SOURCE[0]}")/../../.env.$ENVIRONMENT")"
    if ! source "$ENV_FILE" 2> /dev/null; then
        ENV_FILE="$(realpath "$(dirname "${BASH_SOURCE[0]}")/../../.env")"
        if ! source "$ENV_FILE" 2> /dev/null; then ENV_FILE=""; fi
    fi

    cd app || return 1
    local app_account=$(get_github_account)
    local app_repo=$(get_github_repo)
    cd .. || return 1

    if [[ -z "$app_account" ]] || [[ -z "$app_repo" ]]; then
        echo "Error: Unable to determine application GitHub namespace."
        return 1
    fi

    local cicd_account=$(get_github_account)
    local cicd_repo=$(get_github_repo)

    if [[ -z "$cicd_account" ]] || [[ -z "$cicd_repo" ]]; then
        echo "Error: Unable to determine CI/CD GitHub namespace."
        return 1
    fi

    FOLIO_APP_ACCOUNT="${FOLIO_APP_ACCOUNT:-$app_account}"
    FOLIO_APP_REPO="${FOLIO_APP_REPO:-$app_repo}"
    FOLIO_CICD_ACCOUNT="${FOLIO_CICD_ACCOUNT:-$cicd_account}"
    FOLIO_CICD_REPO="${FOLIO_CICD_REPO:-$cicd_repo}"

    FOLIO_SSH_PORT="${FOLIO_SSH_PORT:-22}"

    GOOGLE_CREDENTIALS="${FOLIO_GCS_CREDENTIALS:-$GOOGLE_CREDENTIALS}"
    export GOOGLE_CREDENTIALS

    export SENTRY_ORG
    export SENTRY_PROJECT
    export SENTRY_AUTH_TOKEN

    ENV_LOADED=true
}

fingerprint_env() {
    local env_string=""
    env_string+="ENVIRONMENT=$ENVIRONMENT;"
    env_string+="GOOGLE_CREDENTIALS=$GOOGLE_CREDENTIALS;"
    env_string+="FOLIO_APP_ACCOUNT=$FOLIO_APP_ACCOUNT;"
    env_string+="FOLIO_APP_REPO=$FOLIO_APP_REPO;"
    env_string+="FOLIO_CICD_ACCOUNT=$FOLIO_CICD_ACCOUNT;"
    env_string+="FOLIO_CICD_REPO=$FOLIO_CICD_REPO;"
    env_string+="FOLIO_APP_DOMAIN=$FOLIO_APP_DOMAIN;"
    env_string+="FOLIO_CF_DNS_ZONE=$FOLIO_CF_DNS_ZONE;"
    env_string+="FOLIO_SSH_PORT=$FOLIO_SSH_PORT;"
    env_string+="FOLIO_ACME_EMAIL=$FOLIO_ACME_EMAIL;"
    env_string+="FOLIO_SSH_KEY_ID=$FOLIO_SSH_KEY_ID;"
    env_string+="FOLIO_PRIVATE_KEY_FILE=$FOLIO_PRIVATE_KEY_FILE;"
    env_string+="FOLIO_PUBLIC_KEY_FILE=$FOLIO_PUBLIC_KEY_FILE;"
    env_string+="FOLIO_CF_TOKEN=$FOLIO_CF_TOKEN;"
    env_string+="FOLIO_DO_TOKEN=$FOLIO_DO_TOKEN;"
    env_string+="FOLIO_GH_TOKEN=$FOLIO_GH_TOKEN;"
    env_string+="FOLIO_GHPR_TOKEN=$FOLIO_GHPR_TOKEN;"
    env_string+="SENTRY_DSN=$SENTRY_DSN;"
    env_string+="SENTRY_ORG=$SENTRY_ORG;"
    env_string+="SENTRY_PROJECT=$SENTRY_PROJECT;"
    env_string+="SENTRY_AUTH_TOKEN=$SENTRY_AUTH_TOKEN;"
    local hash=$(echo "$env_string" | sha256sum | cut -d ' ' -f 1)
    echo "${hash:0:16}"
}

make_env() {
    local file=""
    local base_file
    local vars=$'\n'
    while [[ "$*" != "" ]]; do
        case $1 in
            --base ) base_file="$2"; shift;;
            * ) if [[ -z $file ]]; then file="$1";
                else vars+="$1"$'\n'; fi;;
        esac
        shift
    done
    vars="${vars%$'\n'}"

    if [[ -z $file ]]; then
        echo "Error: Missing target file name."
        return 1
    fi

    if [[ -n $base_file ]]; then
        cp "$base_file" "$file"
    else
        touch "$file"
    fi

    if [[ -n $vars ]]; then
        tee -a "$file" <<< "$vars" > /dev/null
    fi
}
